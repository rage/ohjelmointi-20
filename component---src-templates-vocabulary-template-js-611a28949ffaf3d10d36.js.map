{"version":3,"sources":["webpack:///./src/templates/VocabularyTemplate.js"],"names":["Title","styled","h1","ContentWrapper","div","VocabularyTemplate","render","data","this","props","page","frontmatter","htmlAst","allPages","edges","map","o","res","node","words","vocabularyWords","partials","getNamedPartials","renderAst","rehypeReact","createElement","React","components","Compiler","filePath","fileAbsolutePath","substring","lastIndexOf","length","Provider","value","all","current","title","Component","contextType","PagesContext"],"mappings":"+XAYA,IAAMA,EAAQC,IAAOC,GAAV,gFAAGD,CAAH,MAELE,EAAiBF,IAAOG,IAAV,yFAAGH,CAAH,gEASCI,E,yKAGnBC,OAAA,WACE,IAAQC,EAASC,KAAKC,MAAdF,KACR,EAAiCA,EAAKG,KAA9BC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,QACfC,EAAWN,EAAKM,SAASC,MAAMC,KAAI,SAAAC,GAAM,IAAD,IACtCC,EAAG,UAAGD,EAAEE,YAAL,aAAG,EAAQP,YAEpB,OADAM,EAAIE,MAAJ,UAAYH,EAAEE,YAAd,aAAY,EAAQE,gBACbH,KAEHI,EAAWC,cACXC,EAAY,IAAIC,IAAY,CAChCC,cAAeC,IAAMD,cACrBE,WAAYN,IACXO,SAEGC,EAAWtB,EAAKG,KAAKoB,iBAAiBC,UAC1CxB,EAAKG,KAAKoB,iBAAiBE,YAAY,UACvCzB,EAAKG,KAAKoB,iBAAiBG,QAG7B,OACE,kBAAC,IAAaC,SAAd,CACEC,MAAO,CACLC,IAAKvB,EACLwB,QAAS,CAAE1B,YAAaA,EAAakB,SAAUA,KAGjD,kBAAC,SAAD,CAAQS,MAAO3B,EAAY2B,QAC3B,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAACnC,EAAD,KACE,kBAACH,EAAD,KAAQW,EAAY2B,OACnBf,EAAUX,U,GApCmBc,IAAMa,WAAjClC,EACZmC,YAAcC","file":"component---src-templates-vocabulary-template-js-611a28949ffaf3d10d36.js","sourcesContent":["import React, { Fragment } from \"react\"\nimport { graphql } from \"gatsby\"\nimport rehypeReact from \"rehype-react\"\nimport { Helmet } from \"react-helmet\"\nimport styled from \"styled-components\"\nimport Container from \"../components/Container\"\nimport getNamedPartials from \"../partials\"\nimport \"./remark.css\"\nimport PagesContext from \"../contexes/PagesContext\"\nimport { LoginStateContextProvider } from \"../contexes/LoginStateContext\"\nimport Layout from \"./Layout\"\n\nconst Title = styled.h1``\n\nconst ContentWrapper = styled.div`\n  margin-top: 1rem;\n  padding-bottom: 2rem;\n\n  p {\n    margin-bottom: 2rem;\n  }\n`\n\nexport default class VocabularyTemplate extends React.Component {\n  static contextType = PagesContext\n\n  render() {\n    const { data } = this.props\n    const { frontmatter, htmlAst } = data.page\n    const allPages = data.allPages.edges.map(o => {\n      const res = o.node?.frontmatter\n      res.words = o.node?.vocabularyWords\n      return res\n    })\n    const partials = getNamedPartials()\n    const renderAst = new rehypeReact({\n      createElement: React.createElement,\n      components: partials,\n    }).Compiler\n\n    const filePath = data.page.fileAbsolutePath.substring(\n      data.page.fileAbsolutePath.lastIndexOf(\"/data/\"),\n      data.page.fileAbsolutePath.length,\n    )\n\n    return (\n      <PagesContext.Provider\n        value={{\n          all: allPages,\n          current: { frontmatter: frontmatter, filePath: filePath },\n        }}\n      >\n        <Helmet title={frontmatter.title} />\n        <LoginStateContextProvider>\n          <Layout>\n            <Fragment>\n              <Container>\n                <ContentWrapper>\n                  <Title>{frontmatter.title}</Title>\n                  {renderAst(htmlAst)}\n                </ContentWrapper>\n              </Container>\n            </Fragment>\n          </Layout>\n        </LoginStateContextProvider>\n      </PagesContext.Provider>\n    )\n  }\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    page: markdownRemark(frontmatter: { path: { eq: $path } }) {\n      htmlAst\n      html\n      frontmatter {\n        path\n        title\n      }\n      fileAbsolutePath\n    }\n    allPages: allMarkdownRemark(\n      sort: { order: ASC, fields: frontmatter___path }\n      limit: 1000\n      filter: {\n        frontmatter: { hidden: { ne: true } }\n        vocabularyWords: { elemMatch: { name: { regex: \"/.+/\" } } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            path\n            title\n          }\n          vocabularyWords {\n            type\n            name\n            description\n            parentPagePath\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}